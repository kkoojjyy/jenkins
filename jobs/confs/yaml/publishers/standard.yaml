- publisher:
    name: standard-publisher
    publishers:
      - post-tasks:
          - matches:
              - log-text: '.*'
                operator: AND
            escalate-status: true
            script: !include-raw-escape: shell-scripts/collect_artifacts.sh
          - matches:
              - log-text: '.*'
                operator: AND
            escalate-status: true
            script: !include-raw-escape: shell-scripts/mock_cleanup.sh
      - exported-artifacts
      - groovy-postbuild:
          script: |
            def project = manager.build.project
            def index_fd = project.getWorkspace().child("exported-artifacts/index.html")
            if (index_fd.exists()) {{
              summary = manager.createSummary("graph.png")
              summary.appendText(
                '<iframe src="artifact/exported-artifacts/index.html" width=600 height=400>Report</iframe>',
                false,
              )
            }}
            def container_details = manager.build.getWorkspace().child("exported-artifacts/pushed_containers_details.html")
            if (container_details.exists()) {{
              String details_html = container_details.readToString()
              container_summary = manager.createSummary("package.png")
              container_summary.appendText(details_html,false)
            }}
          on-failure: 'nothing'
      - raw: # the current stable version of jjb (1.6) does not support
             # 'allow-empty-results' in the junit plugin (added in 2.0),
             # so I had to include raw xml to make work
          xml: |
            <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.14">
              <testResults>exported-artifacts/**/*.junit.xml,
              exported-artifacts/**/nosetests*</testResults>
              <keepLongStdio>true</keepLongStdio>
              <healthScaleFactor>1.0</healthScaleFactor>
              <allowEmptyResults>true</allowEmptyResults>
            </hudson.tasks.junit.JUnitResultArchiver>
      - conditional-publisher:
          - condition-kind: shell
            condition-command: >
                find exported-artifacts/find-bugs/ -name "*.xml" | grep -e ".*"
            action:
                - findbugs:
                    pattern: 'exported-artifacts/find-bugs/*.xml'
                    rank-priority: true
                    thresholds:
                        unstable:
                            total-all: 0

- publisher:
    name: 'check-patch_publisher'
    publishers:
      - standard-publisher:
          project: '{project}'

- publisher:
    name: 'check-merged_publisher'
    publishers:
      - standard-publisher:
          project: '{project}'

- publisher:
    name: 'build-artifacts_publisher'
    publishers:
      - standard-publisher:
          project: '{project}'
      - conditional-publisher:
          - condition-kind: '{with-deploy}'
            action:
              - trigger-parameterized-builds:
                - project: 'deploy-to_ovirt-{version}_tested'
                  predefined-parameters: |
                    REPOMAN_SOURCES=$BUILD_URL
                  condition: SUCCESS

- publisher:
    name: 'build-artifacts_publisher-when_on-change'
    publishers: {}

- publisher:
    name: 'build-artifacts_publisher-when_timed'
    publishers:
      - trigger-parameterized-builds:
        - project: 'deploy-to_ovirt-{version}_tested'
          predefined-parameters: |
            REPOMAN_SOURCES=$BUILD_URL
          condition: SUCCESS
      - email-ext:
          recipients: '{email-to}'
          failure: true
          fixed: true
          unstable: true
